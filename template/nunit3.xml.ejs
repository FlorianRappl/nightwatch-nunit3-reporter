<?xml version="1.0" encoding="utf-8" standalone="no"?><%
  const skipped = (Array.isArray(module.skipped)) ? module.skipped.length : 0;
  const passed = module.tests - skipped - module.failures;
  const result = module.failures === 0 ? 'Passed' : 'Failed';
  const success = module.failures === 0 ? 'True' : 'False';
  const testcaseNames = Object.keys(module.completed);
  const totalAsserts = testcaseNames.reduce((sum, item) => sum + module.completed[item].assertions.length, 0);
  const started = new Date(module.timestamp || Date.now());
  const ended = new Date(started);
  const { pid, env, version } = process;
  const frameworkVersion = `${version.substr(1)}.0`;
  started.setSeconds(started.getSeconds() - module.time);
  const startTime = started.toJSON().split('.')[0].split('T').join(' ') + 'Z';
  const endTime = ended.toJSON().split('.')[0].split('T').join(' ') + 'Z';
  let baseId = 0;
%>
<test-run id="2" asserts="<%= totalAsserts %>" passed="<%= passed %>" failed="<%= module.failures %>" total="<%= module.tests %>" inconclusive="0" testcasecount="<%= module.tests %>" skipped="<%= skipped %>" time="<%= module.time %>" duration="<%= module.time %>" start-time="<%= startTime %>" end-time="<%= endTime %>" result="<%= result %>" engine-version="3.0.0.0" clr-version="">
  <test-suite type="Assembly" name="<%= module.group || moduleName %>" executed="True" result="<%= result %>" success="<%= success %>" time="<%= module.time %>" duration="<%= module.time %>" asserts="0">
    <environment framework-version="<%= frameworkVersion %>" clr-version="" os-version="" platform="<%= env.HOSTTYPE %>" cwd="<%= env.PWD %>" machine-name="<%= env.NAME %>" user="<%= env.USER %>" user-domain="" culture="en-US" uiculture="en-US" />
    <properties>
      <property name="_PID" value="<%= pid %>" />
    </properties>
    <test-suite id="<%= baseId++ %>" type="TestSuite" name="<%= className %>" runstate="Runnable" fullname="<%= module.group || moduleName %>" passed="<%= passed %>" failed="<%= module.failures %>" inconclusive="0" skipped="<%= skipped %>" asserts="<%= totalAsserts %>" testcasecount="<%= module.tests %>" total="<%= module.tests %>" time="<%= module.time %>" duration="<%= module.time %>" result="<%= result %>" start-time="<%= startTime %>" end-time="<%= endTime %>"><%

      for (const item of testcaseNames) {
        const testcase = module.completed[item];
        const testresult = testcase.failed ? 'Failed' : 'Passed';
        const assertions = testcase.assertions;

        %>
      <test-case tests="1" name="<%= item %>" fullname="<%= item %>" methodname="<%= item %>" classname="<%= className %>" result="<%= testresult %>" runstate="Runnable" start-time="<%= testcase.timestamp %>" duration="<%= testcase.time %>" time="<%= testcase.time %>" asserts="<%= assertions.length %>"><%
        for (const assertion of assertions) {
          const screenshots = assertion.screenshots || [];

          if (assertion.failure) {

          %>
        <failure>
          <message><![CDATA[<%= assertion.message %>]]></message>
          <stack-trace><![CDATA[<%= assertion.stackTrace %>]]></stack-trace>
        </failure><%
          }

          if (screenshots.length > 0) {

          %>
        <attachments><%
            for (const screenshot of screenshots) {

            %>
          <attachment>
            <filePath><%= screenshot %></filePath>
            <description><![CDATA[Screenshot]]></description>
          </attachment><%
            }
          %>
        </attachments><%
          }
        }

        if (testcase.failed > 0 && testcase.stackTrace) { %>
        <failure message="<%= testcase.message %>">
          <message><![CDATA[<%= testcase.message %>]]></message>
          <stack-trace><![CDATA[<%= testcase.stackTrace %>]]></stack-trace>
        </failure><%
        } %>
      </test-case><%
      }

      if (systemerr) { %>
      <output>
        <![CDATA[<%= systemerr %>]]>
      </output><%
      }

      for (var j = 0; j < (module.skipped || []).length; j++) { %>
      <test-case name="<%= module.skipped[j] %>" fullname="<%= module.skipped[j] %>" methodname="<%= module.skipped[j] %>" classname="<%= className %>" result="Skipped" runstate="Skipped" duration="0" asserts="0">
        <reason>
          <message><![CDATA[Ignored.]]></message>
        </reason>
      </test-case><%
      } %>
    </test-suite>
  </test-suite>
</test-run>
